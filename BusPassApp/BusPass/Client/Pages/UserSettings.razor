@page "/userSettings"
@attribute [Authorize]
@inject IUserRepository userRepository
@inject IAuthenticationService AuthenticationService

@if(user == null) {
    <p><em>Loading...</em></p>
} else {
    <div class="col-md-6 offset-md-3 mt-5">
        <div class="card">
            <h4 class="card-header">User settings</h4>
            <div class="card-body">
                <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="user.Name" class="form-control" />
                        <ValidationMessage For="@(() => user.Name)" />
                    </div>
                    <div class="form-group">
                        <label>Surname</label>
                        <InputText @bind-Value="user.Surname" class="form-control" />
                        <ValidationMessage For="@(() => user.Surname)" />
                    </div>
                    <div class="form-group">
                        <label>Email</label>
                        <InputText @bind-Value="user.Email" class="form-control" />
                        <ValidationMessage For="@(() => user.Email)" />
                    </div>
                    <div class="form-group">
                        <label>Current Password</label>
                        <InputText @bind-Value="user.CurrentPassword" type="password" class="form-control" />
                        <ValidationMessage For="@(() => user.CurrentPassword)" />
                    </div>
                    <div class="form-group">
                        <label>Password</label>
                        <InputText @bind-Value="user.PasswordPlain" type="password" class="form-control" />
                        <ValidationMessage For="@(() => user.PasswordPlain)" />
                    </div>
                    <button class="btn btn-success" style="width: 100%;">
                        @if (loading) {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Edit 
                    </button>
                    @if (!string.IsNullOrEmpty(error)) {
                        <div class="alert alert-danger mt-3 mb-0">@error</div>
                    }
                </EditForm>
            </div>
        </div>
    </div>
}

@code { 
    private User user;
    private bool loading;
    private string error;
    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationService.checkIfAdmin())
        {
            await AuthenticationService.Logout();

        }
        else
        {
            this.user = await userRepository.getUserById(AuthenticationService.user.UserId);
        }
    }

    private async void HandleValidSubmit()
    {
        this.loading = true;
        try
        {
            this.user = await userRepository.updateUser(this.user);
            this.loading = false;
            this.error = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            error = ex.Message;
            this.loading = false;
            StateHasChanged();
        }
    }
}